[
  {
    "objectID": "notes/upgrading.html",
    "href": "notes/upgrading.html",
    "title": "MÖBIUS 3 DOCUMENTATION",
    "section": "",
    "text": "+++ title = ‘Upgrading from 2.5’ draft = false summary = ‘Instructions for importing Mobius 2.5 configuration files’ +++",
    "crumbs": [
      "Home",
      "Notes",
      "Upgrading Old Installations"
    ]
  },
  {
    "objectID": "notes/upgrading.html#upgrading-old-installations",
    "href": "notes/upgrading.html#upgrading-old-installations",
    "title": "MÖBIUS 3 DOCUMENTATION",
    "section": "Upgrading Old Installations",
    "text": "Upgrading Old Installations\nThere is a utility that can help upgrade old Mobius 2.5 configuration files. It should copy all Preset and Track Setups, and most MIDI, keyboard, and host parameter bindings.\nUI configuration is not copied other than the command buttons at the top.\nMIDI bindings need an adjustment to the channel numbers stored in the mobius.xml file, so it is important that you use the upgrade utility rather than copying and pasting XML from the old mobius.xml file into the new one. If you are comfortable with XML editing, what you need to do is add 1 to any channel=‘x’ numbers you see in the  elements.\nSeveral functions have changed names, and some are no longer availble. The upgrade utility will attempt to upgrade the names. If you see warnings in the upgrade log that are not related to missing scripts, plase let me know.\nThere are three phases to the upgrade:\n\nLoading - mobius.xml and ui.xml file are loaded and analyzed but not installed\nInstallation - Previously analyzed files are installed in the Mobius 3 configuration\nUndo - Previously installed Mobius 3 upgrades are removed\n\nTo run the upgrade utility, bring up the Configuration menu and select Upgrade Configuration. A popup window appears with a large log area in the center and a row of command buttons at the top. The buttons do the following things:\n\nLoad Current - Attempts to locate the old configuration files from their standard locations and load them. You will see error messages in the log if the files can’t be found.\nLoad File - Load a file that you select. Use this option of Load Current was unable to find the files in the usual locations.\nInstall - Installs the upgraded configuration after a sucessful analysis\nUndo - Undoes a previous upgrade install\n\nThe log area will display messages about what the utility found in your old files. Normally Presets and Track Setups are added without any problems, but if you already have one of those with the same name as the ones in the old files, the prefix “Upgrade:” will be added to the upgraded objects. The most common case of this is an object named “Default” since there is already a standard Preset/Setup with that name in a new installation.\nIf you have scripts, the utility will verify the file paths to the script files and attempt to load them. Warning messages will be displayed in the log if any files cannot be found. All the script file references will be imported, but you will have to correct the path names in the Script configuration window after installing.\nThe most common source of warnings is when importing MIDI and keyboard bindings. A few function names have changed, and the upgrader will correct those, but I might have missed some and a few functions no longer exist. It you see warnings about unresolved functions or parameters that are not related to scripts, I’d like to hear about them.\nIf you have bindings to scripts, and the script files could not be found, you will likely see warnings about unresolved bindings with names that would appear inside the script file next to the !name statement. The bindings will still be imported, but you will need to correct the paths to the script files before they can be used.\nKeyboard bindings may not work, depending on which keys were used. The internal key numbers used to idenfity keys is different in Mobius 2.5 and Mobius 3. Simple letter and number key bindings should work, as well as common keys like escape and backspace. But the Fn function keys, keys in the number pad, keys in the Ins, Home area and the arrow keys may not work without redefining them. Any key binding that used the Shift, Ctrl, Alt, or Commmand modifiers will have to be redefined.\nA few of you made use of an old feature called Binding Overlays where you could have multiple sets of MIDI bindings that were merged with the first set of “Common Bindings”. The binding overlays will be imported by the ugprader, but you will not be able to activate them yet. I’m working on that now.\nCommand buttons displayed at the top of the UI should all be imported, but they are collected under a new Button Set with the name “Upgrade”. Button sets are a new feature in Mobius 3 where you can define any number of different button collections and switch between them. To see and use your old buttons, you will need to select the “Upgrade” set under the Display menu.",
    "crumbs": [
      "Home",
      "Notes",
      "Upgrading Old Installations"
    ]
  },
  {
    "objectID": "notes/upgrading.html#binding-overlays",
    "href": "notes/upgrading.html#binding-overlays",
    "title": "MÖBIUS 3 DOCUMENTATION",
    "section": "Binding Overlays",
    "text": "Binding Overlays\nA few users made use of what Mobius 2.5 called Binding Overlays. An overlay binding is a named set of MIDI bindings that will be merged with the base set named “Common Bindings” when it is activated. There could only be one binding overlay active at a time. The intent here was to support bindings from multiple hardware devices, but only one of those devices would be in use at a time, and some of those bindings might be different.\nMobius 3 has a similar concept. You can create any number of MIDI binding sets in the MIDI Control panel. The first one is always named “Base” and is always active.\nThe binding sets after the first one are also called overlay bindings. Where this differs from Mobius 2.5, is that more than one can be active at a time.\nTo activate a binding overlay, select it in the MIDI Control panel, and check the Active checkbox. Next to this is another checkbox labeled “Merge with others”. What the merge checkbox does is allows this binding overlay to be active at the same time as other binding overlays. If the merge checkbox is not on, then any time you activate an overlay, all the others that do not have the merge checkbox will be deactivated.\nThe effect is similar to Mobius 2.5 but slightly more flexible. If you don’t check Merge on any of them, then it behaves exactly like 2.5 overlays, with only one being active at a time.\nI’m not entirely happy with the UI for this but, it is functional and not many people make use of this feature. I’ll be adding a simpler way to activate bindings from the main menu.",
    "crumbs": [
      "Home",
      "Notes",
      "Upgrading Old Installations"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site",
    "crumbs": [
      "Home",
      "About"
    ]
  },
  {
    "objectID": "main/synchronization.html",
    "href": "main/synchronization.html",
    "title": "MÖBIUS 3 DOCUMENTATION",
    "section": "",
    "text": "+++ title = ‘Synchronization’ draft = false summary = ‘Instructions for recording synchronized tracks that play together.’ +++\nSynchronization refers to the recording of loops in a track that have a precicely defined size and tempo. Synchronized tracks can play togher without drifting apart.",
    "crumbs": [
      "Home",
      "Main",
      "Synchronization"
    ]
  },
  {
    "objectID": "main/overlays.html",
    "href": "main/overlays.html",
    "title": "MÖBIUS 3 DOCUMENTATION",
    "section": "",
    "text": "+++ title = ‘Using Parameter Overlays’ draft = false +++\nAn Overlay is a collection of parameters that can be combined with the parameters defined in the session. Overlays replace the older concept of the Preset.\nIt is important to understand that using overlays is not required. Many will find it simpler just to set all parameters in the session. Until you reach a point where you feel you need what they do, I recommend you do not use overlays. They complicate how parameter behave and can make it difficult to understand why a change you made doesn’t seem to have any effect.\nIf you are upgrading from Mobius 2.5 or an earlier version of 3.x then you are automatically given a set of overlays that correspond to your old Presets. You can continue to use those in much the same way as you used presets, but I encourage you to think about whether you can stop using them and instead just use some of the new features built into the session.\n\nParameter Layers\nThe concept of parameter layers was introduced in the Using Sessions document. To understand how parameter overlays work, it is helpful to think of parameters as being organized into several layers. Each layer may have any number of parameter values in it. When a function or script needs the value of a parameter it searches through each layer from top to bottom until it finds a value. If a value does not exist in one layer, it moves to the layer below it, and continues until it finds a value.\nThe complete set of layers including overlays is shown in this diagram.\n\n\n\nParameter Layers\n\n\nThere is always one layer at the bottom called the session defaults layer. These are the parameters you set in the Edit Session window under the Default Parameters tab. For many uses of Mobius, this is the only layer you need. All of the parameters you want to use are set as session defaults and shared by all tracks. There are no other layers to think about.\nOften though, you will want some tracks to use parameter values that are different than the session defaults. The syncMode parameter is one of those as are inputPort and outputPort. For example you may want the default syncMode to be Host to synchronize with the host transport, but want some of the tracks to use a syncMode of None so the recordings in those tracks can be freely created with any length. Or you may be using a mult-channel audio interface and want each track to have a differnet inputPort so that each track can record a different instrument plugged into a jack on the audio interface. Or you may want some tracks to use the quantize parmeter set to loop to execute functions when the loop reaches the end, and other tracks to not use quantization at all.\nTo make a track use a parameter value other than the session default, you create a track override layer in the Edit Session window. Any parameters you add to the track override layer will be used instead of the values found in the session defaults layer. In normal use, the track override layer will only contain a few parameters, with most parameters comming from the session default layer.\n\n\nHow Sessions layers and Overlays Combine\nAs mentioned, most uses of mobius will have two layers for each track. The session defaults and the track overrides. These are both defined in the Edit Session window and will persist as long as you are using that session.\nThe sessionOverlay when activated sits between the session default layer and the track override layer, and the trackOverlay sits above the track override layer.\nIf you have both overlays enabled, there are then four parameter layers that can each contribute parameter values.\n\n\nWhy would you want overlays?\nWell, you don’t necessarily. You may find that you have them if you upgraded from an eariler Mobius release, because what used to be called Presets have been converted. THe session overlay is what used to be called the Setup Default Preset and the track overlay is what used to be called the Track Preset.\nWhat made Presets different from Setups is that they could be channged quickly at any time. You could start using a track with a certain set of IO ports, synchronization settings, or quantization settings. Then in mid performace change presets and all of those parameters would change. Overlays are the same, they can be used to make rapid changes to many parameters at the same time.\nThis differs from editing the session. Sessions should be thought of as things you use for a long period of time, at least one “song” during a performance, and possibly an entire performance. Overlays can be changed any time, many times during a song if necessary. If you need to change more than one parameter at exactly the same time, overlays are a convenient way to do that. They are easier to use than a script that sets multiple paraeters, or binding several MIDI buttons to different parameters and pressing multiple buttons.\n\n\nWhy do overlays converted from Presets suck?\nPresets were large. They contined around 45 parameters. For most people, presets were almost entirely the same except for a handful of commonly changed parameters like syncMode and inputPort. Once you had built a few Presets and wanted to start using something like switchQuantize set to loop at all times, then you would have to edit every Preset and make that change.\nSo after an upgrade, it is recommended that you revisit the overlays that were converted from Preset and remove all of the parameters that you don’t care about, parameters that can just use the session defaults.\n\n\nOverlay best practices\nOverlays should be as small as possible. They should only contain the parameters you need for a particular purpose. If you aren’t using one of the esoteric parameters like slipTime or muteMode, leave them out. Let parameters you rarely or never used just be defined by the session defaults.\n\n\nWhen to use the Session Overlay vs. the Track Overlay\nThe session overlay supplies parameters for all tracks. Let’s say you have two instruments, a keyboard and a guitar. The keyboard is plugged into jack 1 on the audio interface and the guitar into jack 2. These are routed into Mobius as ports 1 and 2. The session default layer defines inputPort as 1 so you start recording the keyboard in all tracks. If you now want to switch to overdubbing with guitar, you could define a session overlay with inputPort set to 2 and activate that as the session overlay. All tracks will now receive on port 2.\nTrack overlays would be used when you want to make one or more tracks behave differently than the others. Let most tracks receive parameters from the sesison defaults or the session overlay, and for only those tracks that need to be different give them a track overlay.\nAgain, if you are wondering why or when you would use overlays, the chances are you don’t need to use them at all. Overlays will become visible only for older Mobius users that have used Presets in the past. If you are just starting out with a fresh installation there will be no overlays and you can consider whether you need them as time goes on.\n\n\nDefining Overlays\nOverlays are created and managed from the Parameter Overlays window which is displayed by selecting Edit Overlays from the Overlays menu. If this is a fresh installation, the overlays window will be mostly empty, if you have upgraded from a previous version, you should see entries in the overlay table on the left with names that correspond to your old Preset names.\nTo create a new overlay right click over the table on the left and select New.\n\n\n\nEmpty Overlay Window\n\n\nA dialog pops up where you enter a name for the overlay. Like presets, all overlays must have unique names.\nOnce youu have defined some overlays, clicking on the name of one of them in the table will display a parameter tree in the center and a parameter form on the right.\n\n\n\nFull Overlay Window\n\n\nLike the Edit Session window, clicking on a category name in the parameter tree will display a form containing parameters in that category, but only if they are included in the overlay. If you do not see a category form, it means the overlay does not contain any parameters from that category.\nNOTE WELL: Parameter forms in overlays do not behave the same as parameter forms in the session editor. Overlay forms are “sparse” meaning they will only show the parameters included in the overlay. This is becaues they exist independently of any sessions, and to not know how they are going to be used so they won’t show darkened parameter labels for defaulted parameters. Initially all parameter forms in a new overlay will be empty.\nTo add parameters to an overlay, click and drag parameter names from the tree onto the form area. You then see fields being added to the form for each parameter you drag over. Once the form contains parameter fields you can change their values.\nIf you decide you no longer want to include a parameter in an overlay, click on the parameter label in the form and drag it onto the tree area. The parameter will be removed from the form.\nAs you click on overlay names in the table on the left, the forms will change to show only those parameters found in the selected overlay.\n\n\nOverlay Table Menu\nIf you right click on an overlay name, a menu is displayed allowing you to copy, rename, or delete the overlay.\n\n\n\nOverlays Menu\n\n\n\n\nActivating Overlays\nIn order to use overlays, they must be activated. There are two ways to do this, either by selecting them in the session editor which makes them permanent, or by selecting them at runtime using the main menu or with bindings.\nTo specify a track overlay in the session, select a track from the track table and click on the Overlay category in the tree view.\n\n\n\nTrack Overlay\n\n\nThe Track Overlay label will start out with dark text meaning this track does not override the session default. Click on it so that it turns bright, and select an overlay.\nFor older Mobius users, what is happening here is equivalent to what previous versions of Mobius did in the Track Setup window by selecting a Track Preset.\nIf you want all tracks to share the same overlay, a similar thing can be done in the Default Parameters tab of the session editor. The track overlay you select here will be used by all tracks unless they have a track-specific override. This is equivalent to what previous versions of Mobius did in the Track Setup window by selecting a Default Preset.\nTemporary track overlays can be selected from the main menu.\n\n\n\nOverlays Menu\n\n\nWhen you select an overlay from the menu, it will only be sent to the track that currently has focus, the track with the white box around it in the UI. Note that unlike the old Preset menu, there is an item at the top named “[None]”. When you select this item, it removes any overlay that was previously selected for this track. Unlike Presets, it is permissible for a track to use NO overlays.\nFinally a temporary track overlay can be activated using bindings. In the bindings window select the tab named Configurations. You will see the names of all defined overlays and sessions in the list box. Select an overlay and set the trigger you would like to associate with it as usual.\n\n\n\nOverlays Menu\n\n\nOnce you have created a binding to an overlay, it can be activated with one MIDI or keyboard button press rather than interacting with the UI menus or session editor windows.\nNOTE WELL: Overlays selected from the main menu or with bindings are temporary and will be removed when the track is reset using either the Track Reset or Global Reset functions. After the track is reset, the track will revert to using using the overlay defined in the session (if any).",
    "crumbs": [
      "Home",
      "Main",
      "Parameter Layers"
    ]
  },
  {
    "objectID": "main/using-midi.html",
    "href": "main/using-midi.html",
    "title": "MÖBIUS 3 DOCUMENTATION",
    "section": "",
    "text": "+++ title = ‘MIDI Tracks’ draft = false summary = ‘Instructions for recording and loading MIDI tracks.’ +++\nMIDI Tracks are a recent feature of Mobius 3. They allow you to record and play MIDI loops in much the same way as audio tracks. MIDI tracks also support a number of options that audio tracks do not have, making them useful for pre-recorded drum loops or backing tracks that change their size and tempo to match audio tracks recorded live.\nTo start using MIDI Tracks you must add one or more of them in the session. See the Sessions document for details on configuring tracks.\nOnce you have MIDI tracks, you control them by sending them functions or parameter changes using Bindings just like audio tracks. Many of the same functions for recording audio tracks work with MIDI tracks, these include:\nIn addition, MIDI tracks support parameters like Sync Source and Sync Unit to record synchronized tracks, and Quantize Mode to control when functions occur.\nTo help identify MIDI tracks, the track number in the UI will displayed in a different color than the audio track numbers. It is also recommend that you give them names in the session.",
    "crumbs": [
      "Home",
      "Main",
      "Configuring MIDI Devices"
    ]
  },
  {
    "objectID": "main/using-midi.html#midi-track-follow-parameters",
    "href": "main/using-midi.html#midi-track-follow-parameters",
    "title": "MÖBIUS 3 DOCUMENTATION",
    "section": "MIDI Track Follow Parameters",
    "text": "MIDI Track Follow Parameters\nMIDI Tracks support a number of parameters to help them synchronize with other tracks. This can be useful for pre-recorded backing tracks you want to use with live-recorded audio tracks.\nFollowing means that a track will respond to things that happen in another track. The other track is called the Leader.\nWhen a leader track does something interesting it sends a notification to any follower tracks. If the follower tracks are configured to respond to those notificiations, the followers will react.\n\nLeader Type\nIndiciates whether this track will do any form of following. The parameter values are:\n\nNone\nTrack Number\nTrack Sync Master\nTransport Master\nFocused\nHost\nMIDI In\n\nNone means that the track will now do any following. It will act independently of other tracks.\nTrack Number means that the track will follow a specific track identified by number. This number must be entered as the value of the Leader Track parameter.\nTrack Sync Master means that the track will follow whichever track is currently designated as the Track Sync Master. This may be used instead of Track Number if you want more flexibility in specifying which track should be the leader. You can change the Track Sync Master at any time without editing the Session.\nTransport Master means that the track will follow whichever track is currently designated as the Transport Master. This is similar to using Track Sync Master except we look for the current Transport Master to determine the leader track.\nFocused means that the track that currently has focus in the UI will be the leader. Focus is indiciated by the white box drawn around the track strip. This is also similer to using Track Sync Master except the focused track can be changed more easily. If you use this option you need to remember that whenever you click on a track, or use the track selection keys, or do anything else that selects a track, this may be changing a leader.\nHost and MIDI In are special leader options because they don’t actually represent tracks, they represent Sync Sources. If you use these leader types, only a few of the follow options are meaningful. Follow Mute will be used when the sync source is stopped and Follow Record End will be used when the sync source is stopped.\nFollowing sync sources is an evolving concept so if you have ideas around this please share.\n\n\nLeader Track\nWhen you set Leader Type to Track Number you must enter a track number for this parameter. The follower track will only respond to events sent by that specific track.\n\n\nLeader Switch Location\n\n\nFollow Record\n\n\nFollow Record End\n\n\nFollow Size\n\n\nFollow Mute\n\n\nFollow Quantize Location\n\n\nFollower Start Muted\nThis parameter controls whether a track will be automatically muted as soon as it is started after the leader track finishes recording.\nNormally, when a track uses Follow Record End it will begin playing audibly when the leader track finishes recording. In some cases you might to start the follower playing in time with the leader but have it be silent so you can control when the sound is heard. With this option on, the follower begins playing along with the leader, but is in Mute mode which you then turn off with the Mute function when you want it to be heard.",
    "crumbs": [
      "Home",
      "Main",
      "Configuring MIDI Devices"
    ]
  },
  {
    "objectID": "main/transport.html",
    "href": "main/transport.html",
    "title": "MÖBIUS 3 DOCUMENTATION",
    "section": "",
    "text": "+++ title = ‘The Transport’ draft = false summary = ‘Instructions for using the Transport to synchronize tracks and send MIDI clocks.’ +++\nThe Transport is a new feature in build 30. It is responsible for the generation of MIDI clocks that can be used to synchronize with external hardware devices or other applications, and is the primary mechanism for recording multiple tracks that play in synchronization with each other without drifting apart.\nWhat the Transport does can be difficult to talk about, depending on your history with Mobius. For those that are relatively new, the Transport may seem obvious. All DAWs have a similar concept: a tape-like timeline with a tempo, time signature, a metronome, and control buttons like Play and Stop. Some of the more sophisticated hardware loopers do as well.\nFor those that have used Mobius for a long time, the need for the transport may not seem obvious. Tracks have long been able to generate MIDI clocks and synchronize with each other, so why would you be interested in something new that does the same thing?\nI’m going to start by describing how the transport can be used from the perspective of someone new to Mobius, without any preconcieved notions about how things were done in the past. Later there is a section intended for older users that compares the transport with older, similar features and explains why you might wish to use the transport instead.\n\nTransport Basics\nFundamentally, the transport is like a metronome. You give it a tempo, start it, and while it is running it will generate pulses or beats at that tempo. You can use these beats for several things, but mostly they are used to start and stop the recording of a track at exact times.\nSimple metronomes only generate beats at a defined tempo. But it is usually desireable to think about music in larger units of time. No one turns to their band and says “let’s play a 48 beat blues!”. Beats are usually combined into larger units called measures or bars, and bars are then combined into even larger units called songs or in our case loops.\nThe Transport allows you to define three units of time: beat, bar and loop. When you create a synchronized recording you can choose to start and stop the recording on any of these three time units. The reordings may not all be exactly the same length but they will all share the same fundamental beat length.\nThese concepts should be familiar to anyone that has experience using a DAW. Synchronizing things with the Mobius transport is very much like synchronizing with the plugin host. It’s just that the transport lives inside Mobius and that gives us more control over how it behaves.\n\n\nTransport Parameters\nThe transport supports a number of parameters to define how it generates synchronization pulses. These are currently set in the Session but other more convenient ways will be provided in the future.\n\n\n\nTransport Parameters\n\n\nThe most important transport parameters are:\n\nDefault Tempo\nBeats Per Bar\nBars Per Loop\n\nThe transport always generates beat pulses at a defined tempo. There are several ways to define this tempo, the session just defines the default or starting tempo the transport will have when you bring up Mobius for the first time. You may also define the tempo during performance by using Tap Tempo in the UI, or by recording a Transport Master track.\nThe Beats Per Bar parameter defines the length of a bar in units of beats, and Bars Per Loop defines the length of a loop in units of bars. The most common value for Beats Per Bar is 4. The value of Bars Per Loop is often just 1 in which case a bar and a loop will be the same size.\n\nWhy “Bars Per Loop”?\nFor the same reason that multiple beats are almost always organized into measures or bars, multiple bars are often thought of as a larger unit of time: a 12-bar blues for example. While the beats per bar will often stay the same from one performance to another, larger collections of bars will vary depending on the structure of the song you have in mind, or the backing track you are using. It is not necessary to use Bars Per Loop, but you may find it convenient when recording long tracks. If you record a track that is 2 minutes long at 4/4 time, it might conceptually be 12, 16, 24, or 32 bars long. If you know that is what you are going to create ahead of time, you can set Bars Per Loop accordingly which can then assist in selecting synchronization points, rather than having to count bars as they play.\n\n\nSending MIDI Clocks\nThe Transport now controls the way in which Mobius generates MIDI clocks, replacing the older concept of Out Sync Mode. Once the transport tempo is defined, and the transport is started MIDI clocks may or may not be generated. If you want to generate MIDI clocks while the transport is running you must check the Send Midi parameter. When this parameter is checked, a MIDI Start or Continue message is sent whenever the transport is started along with clocks at the transport’s tempo. When you stop the transport a MIDI Stop message is sent.\nWhen the transport is stopped, you can choose whether or not to continue sending MIDI clocks. It is usually benneficial to keep clocks going even while stopped so that you give external devices time to adapt to tempo changes before they are started. Some older devices may be confused by that, in which case you can control this with the Send Clocks When Stopped parameter.\nThe Manual Start option is a more advanced topic that will be discussed in detail later. If this option is checked, a MIDI Start message is not sent immediately when the transport is started, instead it waits for you to send it with the MidiStart action that may be bound to a footswitch or other trigger.\nThe Min Tempo and Max Tempo parameters are used when defining the transport tempo from a Master Track. This is discussed later.\n\n\nMetronome\nWhile not available yet, the transport will support an optional metronome. Like most metronomes it will play a short sample on each beat, bar, or loop point that the transport reaches once it has been started. Also planned are “count in beats” which are common in other applications. This is still under development so suggestions are welcome.\n\n\n\nTransport Control\nWhile the Session contains the starting parameters for the transport, to use it you will need to add the Transport Element to the user interface. Since this is a new feature it is not visible by default. To add it, go to the Display menu and select Edit Layouts. Then under the Main Elements tab, drag the element named “Transport” from the right side to the left. Click Save. Like other UI elements, the Transport can be moved around by clicking on it and dragging it, and it can be resized by clicking and dragging on the border.\n\n\n\nTransport Element\n\n\nThe Transport Element contains several subcomponents that, being a science nerd, I’ll call “atoms”. The atoms are arranged in two rows. The top row contains the Loop Radar, Beat Flasher, Stop Button, Tap Tempo Button, and Tempo Display. The bottom row contains information about the Beats Per Bar, Bars Per Loop, the current beat within the bar, and the current bar within the loop.\nYou start the transport playing by pressing the Start button. While playing the text inside the button changes to Stop and clicking on it again will stop the transport. The Tap button can be used to enter a tempo by clicking on it twice. The current transport tempo is displayed to the right of the Tap button. The range of tempos you can enter is constrained by the Min Tempo and Max Tempo session parameters. If you tap a tempo outside this range it will be doubled or halved until it fits within this range.\nWhile the transport is playing the Loop Radar will fill with color, similar to the loop radar in a track. As the transport crosses beat, bar, or loop boundaries, the Beat Flasher will flash: green on each beat, yellow on each bar, and red on each loop.\n\n\nThe Transport for Old Mobius Users\nTalking about what the transport does and how it is used may be difficult for older Mobius users. Mobius grew up without a transport and it evolved ways to accomplish the same things using different terminology.\nFor older users, the simplest way to think of the transport is as a short empty track that you record simply for the purposes of synchronizing other tracks. This was a common technique in the past. This empty track would be the Out Sync Master, it would generate MIDI clocks, and the other tracks could synchronize with it using Track Sync.\nLike an empty track, the transport has a length, this length can be converted into a clock tempo, and the length can be divided into smaller units. The subdivisions of a track have been called Cycles and Subcycles. The transport uses the more familiar terms Bars and Beats. Unlike a track, the Transport does not record or play any audibile content, and the tempo can be more freely controlled.\nOld-school loopers have come to think of a transport as a bad thing. It is something that locks you into a tempo and forces you to make loops that are of a pre-defined size. They much prefer “first loop capability” where you can define the length of loops on the fly using any tempo or length they choose at the time. It is important to understand that while the Mobius transport can be used to record loops of a pre-defined tempo and size, that is only one way to use it. When you think about it, selecting a tempo using “tap tempo” is really no different than recording a “first loop”. You are defining a span of time with two presses of a button, and once that span of time is locked in, you can choose to synchronize with it.\nWhat makes the Mobius transport different than synching with the plugin host transport, is that the tempo of the transport can be defined by recording a live audio track. To do that, the track is configured to be the Transport Master.\n\n\nTransport Master Tracks\nTo control the tempo of the transport from a track, the track must be made the Transport Master. There are two ways to accomplish this, the first is by configuring the track’s Sync Source parameter in the session.\n\n\n\nTransport Master Configuration\n\n\nMost of the names in the Sync Source menu represent things that generate sync pulses. The name Master is a special case that means that this track would like to sync with the Transport, but it wants to control the transport tempo rather than following it.\nFor old Mobius users, this is similar to the old Sync Mode parameter value named Out.\nWhen a track using Sync Source Master is finished recording, the length of the track is analyzed and converted into a tempo to give to the transport. The formula for calculating the tempo is somewhat complex, but is obvious in most cases for shorter loops where it behaves much like tap tempo. For long loops of many seconds, it is influenced by the Bars Per Loop parameter which will divide long loops into smaller sections before deriving the tempo. The resulting tempo will then be constrained by the Min Tempo and Max Tempo parameters in the same way as using the Tap button in the transport element.\nWhen a track is the Transport Master, the transport will be started automatically as soon as the track finishes recording. If the Send Midi transport parameter is also checked, this will begin generating MIDI clocks.\n\nMultiple Tracks with Sync Source Master\nThere can only be one Transport Master track at a time. If you have several tracks configured with Sync Source Master, the first one recorded will become the transport master, and the others will revert to synchronizing with the Transport itself.\nThis is different than old Mobius behavior where if a track used SyncMode=Out and there was already an OutSyncMaster, it would switch to using Track Sync instead.\n\n\nChanging the Transport Master Track\nThe track that is considered the transport master may be changed at any time by sending the SyncMasterTransport function to the desired track. When that happens, the length of the new track determines the transport tempo. Even tracks that did not use Sync Source Master can request to become the transport master.\nThe master track may also be disconnected from the transport. Disconnection may be requested by sending the SyncMasterTransport function to a track that is already the transport master. In other words, the SyncMasterTransport function toggles the state of being the transport master.\nA track may also be disconnected from the transport if the active loop is reset, or if the track switches to a loop that is empty.\nOnce a the transport master track is disconnected, another master will be automatically selected if that track is configured with a Sync Source of Master and it is changed to have an active loop that is not empty. This may be done by re-recording an empty loop, or switching from an empty loop to a loop that is not empty. This is called making the track “available”. Only tracks that have Sync Source Master will be automatically selected as the master. A track that does not use Master can only become the master by sending it the SyncMasterTransport function manually.\n\n\nEditing the Transport Master Track\nWhile a track is connected to the transport, changes made to the track that alter it’s size may result in a corresponding change to the transport’s tempo. Not every change to a track will result in a transport tempo change. If you enlarge the track using “rounding” functions like Multiply, InstantMultiply, or Insert, or use forms of quantization, the fundamental beat length of the track will remain the same and the transport tempo will not change. Examples of changes that will change the fundamental beat length are Unrounded Multiply and Unrounded Insert without any quantization.\nIf you reset the loop in the master track, or switch to a loop that is empty, this does not automatically reassign the master track and will not alter the transport tempo. The track enters a state of being disconnected from the transport and the transport is allowed to run at it’s current tempo. If you then switch to a non-empty loop or re-record a new loop in the master track, it will reconnect to the transport and possibly change it’s tempo.\n\n\n\nSynchronizing With The Transport\nTracks that are not the transport master track can synchronize with the transport by setting their Sync Source to Transport. New recordings in those tracks will begin and end when the transport reaches the location specified by the Sync Unit parameter which may be either Beat, Bar, or Loop. To synchronize with the transport it must be started, either manually with the Start button in the transport UI or automatically when a master track is connected.\nSynchronizing with the Mobius transport is very much like synchronizing with a plugin host’s transport.\nFor more on other forms of synchronization see the Synchronization chapter.",
    "crumbs": [
      "Home",
      "Main",
      "Transport Basics"
    ]
  },
  {
    "objectID": "main/sessions.html",
    "href": "main/sessions.html",
    "title": "MÖBIUS 3 DOCUMENTATION",
    "section": "",
    "text": "+++ title = ‘Using Sessions’ draft = false summary = ‘Instructions for defining and using sessions to manage Mobius configuration’ +++\nA Session is a collection of configuration settings that is saved on the file system. When you start Mobius, a session is loaded into memory and when you shutdown Mobius the current contents of the session may be saved. You can save any number of sessions but when you use Mobius, you are always using one active session.\nMost audio applications have a similar concept, usually also called sessions or projects or templates.\nIf you are familar with Mobius 2.5, the Session is a replacement for the Track Setup, the Preset, and most of what were formerly called Global Parameters. The session contains all of the parameters that control how Mobius responds to actions, and and how each track uses audio, MIDI, and synchronization services.\nYou would typically design several sessions to accomodate different performance styles and environments. Often a session would be used for a single “song” within a larger performance. Or you might use different sessions for different hardware you want to connect. Or for differences when using Mobius standandalone and using it as a plugin.\nThough not available yet, the Session is also where you will store audio and MIDI track content, replacing the Mobius 2.5 concept of the Project.\nSessions do not containg bindings or scripts. Those are configured separately and are used across sessions.",
    "crumbs": [
      "Home",
      "Main",
      "Where are Sessions?"
    ]
  },
  {
    "objectID": "main/sessions.html#parameter-layers",
    "href": "main/sessions.html#parameter-layers",
    "title": "MÖBIUS 3 DOCUMENTATION",
    "section": "Parameter Layers",
    "text": "Parameter Layers\nA parameter is something that controls how Mobius behaves. A parameter consists of two things, a name and a value. One of the most frequently used parameters is named Quantize which may have the values Off, Subcycle, Cycle, and Loop. Giving a parameter a value is called assigning or setting or defining the parameter. In some cases we also use the term including a parameter when something may contain a parameter value or it may not.\nThe session includes almost all of the parameters in the system. Only a very few called system parameters are found outside the session.\nTo understand how sessions and parameters behave, it is helpful to think of parameter values as being organized into several layers. Each layer may have any number of parameter values in it. When a function or script needs the value of a parameter it searches through each layer from top to bottom until it finds a value. If a value does not exist in one layer, it moves to the layer below it, and continues until it finds a value.\nThere is always one layer at the bottom called the session defaults layer that contains values for all parameters. For simple uses of Mobius, this may be the only layer you need. All tracks share the same default parameter values. Usually though you will want some tracks to use different parameter values than other tracks. Each track has a collection of parameters called the track override layer. When a track includes a value in it’s override layer, that value is used instead of the value found in the session defaults layer. Tracks do not need to override every parameter, only the ones that need to be different from what is in the default layer.\nBeyond the session defaults and the track override layers, there are two additional layers that may be inserted into this stack of layers. The session overlay and the track overlay. The session overlay sits between the session defaults and the track overrides, and the track overlay sits above the track overrides.\nBefore we go any further, it should be stressed that there is no requirement to use session or track overlays. In fact, it is recommended that you do NOT use them unless you need them. If you are new to Mobius, ignore overlays for now. Just set all of the parameters in the session defaults layer and where necessary override a few parameters in each track. The only reason you might see track overlays is if you have upgraded a previous installation where all of the former Presets will have been converted into track overlays. This is discussed in more detail in the Using Parameter Overlays document.\nAs shown in the following diagram, the session defaults and session overlay is shared by all tracks, but each track may have it’s own track overrides and a track overlay.\n\n\n\nParameter Layers\n\n\nBriefly, the main reason to use either form of overlay is when you need to temporarily swap in a different set of parameters quickly and without introducing audio artifacts which may happen if you were changing the entire session. If you needed to change 10 different parameters at the same time, rather than writing a script, or pushing 10 different buttons on your MIDI controller, you could collect all ten parameter values into one overlay and activate it with one button. This is approximately how Presets used to work which is why Presets have been converted into track overlays. The problem with presets is that they contained a great many parameter values and you had to use all of them if you were going to use a Preset. If for example you had 5 presets being used by different tracks, and you decided that Empty Loop Action needed to be the same in all tracks, you would have to edit all 5 presets. Using track overlays, you would just not include Empty Loop Action in your overlay and the system would always get the value from the session defaults layer. An overlay can contain as few as one parameter or as many as all of them, it’s up to you.\nAppologies if this sounds confusing, but all of this exists mostly to simulate the behavior of what used to be called Track Setups and Presets which were used by a few advanced users in older releases. It is not necessary to understand any of this to begin using Mobius.",
    "crumbs": [
      "Home",
      "Main",
      "Where are Sessions?"
    ]
  },
  {
    "objectID": "main/sessions.html#session-management",
    "href": "main/sessions.html#session-management",
    "title": "MÖBIUS 3 DOCUMENTATION",
    "section": "Session Management",
    "text": "Session Management\nSessions are accessed from the main menu item named unsurprisingly Sessions There are two sub-items Edit Session and Manage Sessions. Edit Session is where you make changes to the currently active session. Manage Sessions is where you can view and organize your collection of sessions.\n\nEdit Session\nThe Edit Session window is organized into three tabs: Tracks, Default Parameters, and Globals. The Tracks tab is where you will configure the number of tracks you want and what type (audio or MIDI) they are, and where you set track override parameters. The Default Parameters tab is where you set all of the parameters in the session defaults layer described above. The Globals tab is where you define parameters for things such as the Transport which is shared by all tracks.\n\n\n\nEdit Session Window\n\n\n\nParameter Trees\nThere are lots and lots of parameters that can be set in the session. To help locate the ones you want, parameter names are organized into a tree view which is similar to a file browser. You will see parameter trees in a number of places in the UI and they all behave in the same way.\n\n\n\nParameter Tree\n\n\nThe tree contains a number of category names that you expand using the little triangles. Within each category may be other categories, or the names of individual parameters. When you click on a category or parameter name, a form is displayed to the right of the tree where you can edit the parameters in that category.\nAt the top of the parameter tree is the search box. When you type a word in the search box, the tree will close and expand categories to display only those parameters whose names contain the word you have entered. This can help locating a parameter whose name you might know but forget what category it is under. Deleting the words in the search box will restore the tree to it’s normal form where categories are expanded manually.\n\n\nParameter Forms\nWhen you click on an item in a parameter tree a form is displayed to the right of the tree containing the parameters in that category.\n\n\n\nParameter Form\n\n\nTo change the value of a parameter, click on it’s current value in the parameter form. Many parameters are edited with text input fields, in this example Subcycles has a text field containing the number 4. Some parameters are edited with “combo box” menus that only allow you to select from a set of pre-defined values. A few such as Overdub Quantized can only have an on or off state and are edited with checkboxes. Click on the rounded rectangle to turn the check on and off.\nIn some forms you will notice that the parameter names have different colors. The color determines whether this parameter is included in the layer you are editing and can be changed. If the label color is bright, it may be edited. If it is dark, it is not included in the layer and must be activated by clicking on the label.\n\n\n\nParameter Form\n\n\nIn the previous example, only the Switch Quantize parameter is included in this layer. The others are not and are disabled.\nIf it is a pale red color, it means the parameter is being occluded by the presence of an overlay. Hovering over the label will popup a tool tip that contains the name of the overlay that is occluding this parameter. This is discussed in more detail later. This is sometimes also referred to as “shadowing” or “hiding” the parameter.\n\n\n\nParameter Form\n\n\nThe value shown for an occluded parameter is the value that comes from the overlay so you can see exactly what the effective value will be, which may be different than the default value defined in the session.\n\n\nTrack Table\nThe Tracks tab is where you will spend most of your time. This is where you define how many tracks of each type you want to use, the order in which they are displayed, and set the parameters that may be different for each track in the track overrides layer. On the left is the track table, in the center is a parameter tree, and on the right are the parameter forms.\n\n\n\nEdit Session Window\n\n\nThe track table lists all of the currently configured tracks using the pattern:\n1:Audio:\nAll tracks have a unique number starting from 1. You cannot assign track numbers, they are defined by the order in which tracks appear in the track table. Next to the track number is the track type. Currently this will always be either “Audio” or “Midi”, though future releases will be adding more track types. Finally the track name is included if you have set the track name. If the track is not named, it will display only the number and type.\nTrack numbers have historically been used to identify tracks in bindings and scripts. This is still the case, but now that sessions contain tracks of different types which you can order however you like, identifying tracks by number can lead to confusion if you are not careful. Bindings are not currently “inside” the session. Bindings are global and apply to all sessions. So a binding for track number 1 in one session may not behave the same in a different session if track number 1 isn’t of the same track type (audio or midi).\nIn future releases, bindings will be allowed to reference tracks in different, more reliable ways. Until then, if you want a mixture of audio and MIDI tracks, it is recommended that you follow the convention of putting all of the audio tracks first, followed by any MIDI tracks.\nWhen a track row is highlighted, right clicking the mouse will bring up a popup menu.\n\n\n\nEdit Session Window\n\n\nThe Add item will add a new track, prompting you to select a type. Once you have added tracks, you can reorder them by clicking and dragging them in the table. If you mix tracks of different types, it is recommended that you give them names to help identify them. A track name may be specified in two ways, using the Rename item in the popup menu, or by selecting the General category in the parameter tree and editing the Track Name field.\nThe Delete item deletes a single track.\nThe Bulk item provides a way to add or remove several tracks at once. You are prompted for the number of tracks of each type. If the number of tracks is higher than it is now, new tracks will be added after the existing tracks. If the number of tracks is higher than it is now, tracks will be deleted. Note that when deleting tracks in bulk, tracks with the higher numbers are removed first. After adding or deleting tracks in bulk, all tracks are renumbered which may impact bindings.\n\n\nTrack Override Parameters\nRecall that each track has a track overrides layer that may include parameters that override the values found in the session defaults layer. After selecting a track in the track table, a parameter tree and form will be displayed containing only the values in the overrides layer for the selected track.\nAs mentioned earlier, many of the parameter labels in track forms will be dark meaning the parameter is not being overridden and it will show the default value. To override a parameter click on the label so that it becomes bright and the value may be modified.\nIt is best to keep the number of parameters a track overrides to a minimum. If you find that you no longer need to override a parameter and can simply use the session default, click on the label so that it turns dark again and it will display the default value.\nAs you select other tracks in the track table, the tree and the forms will change to show the parameter overrides for that track. You may edit as many tracks as necessary, you do not need to click the Save button for every track, just once when you finished editing the entire session and are ready to start using it.\nThere will be slightly different parameter trees and parameter forms for Audio and MIDI tracks since not all of the parameters available for MIDI tracks apply to audio tracks and vice versa.\nFor details on MIDI track parameters see Using Midi Tracks\n\n\n\nManage Sessions\nThe Manage Sessions window allows you to view all of the sessions that have been saved and perform a few operations on them.\n\n\n\nSession Manager Window\n\n\nIf this is a new installation, there will be a single session named “Default”. If you have used older versions of Mobius 3, all of the Setup definitions from prior builds will have been converted into sessions with the same name. The session that is currently being used will have the word “Active” in the Status column.\nThe window contains one large table listing all of the saved sessions. If you highlight a row and right click the mouse, a popup menu appears.\n\n\n\nSession Manager Menu\n\n\nThe Load item will load the session from the file system and make it the active session. In the past, Setups were relatively light-weight things, consisting of little more than a few parameter definitions. Sessions should be thought of as heavier things since they can contain content as well as parameters. You normally would not change sessions often, and when you do tracks that are currently playing something may be removed or replaced.\nThis differs from how Setups were used. It was common to use Setups just as a convenient way to adjust all the track volume levels, or IO ports, or sync modes on the fly during live performance. This can still be done but once sessions contain content this can result in audio glitches. To replicate the old Setup behavior, you should use overlays instead.\nWhen you load a session from this window, it also becomes the Startup Session and will be automatically loaded the next time you start Mobius.\nThe Copy item allows you to make a full copy of the session, you are prompted to enter a new unique name. This is similar to what other systems might call Save As. Once you have made a copy, you can then load and edit the session parameters without impacting the original session.\nThe New item will create a new session without copying any state from an existing session. The session will be initialized with default parameter values and track counts. NOTE: This is where many applications have the notion of a “template” that can be used as the basis for new sessions. This is being considered but is not yet available. If you want to make a session that looks like one you already have, use Copy.\nThe Rename item will prompt you for a new session name. Session names are not signifant for the behavior of Mobius, they just provide a way to identify sessions designed for a particular use.\nThe Delete item will delete a saved session. Once sessions become containers of content as well as partameters you should be careful about deleting them, since content may be lost. Deleting the session named “Default” is not allowed.",
    "crumbs": [
      "Home",
      "Main",
      "Where are Sessions?"
    ]
  },
  {
    "objectID": "main/upgrading.html",
    "href": "main/upgrading.html",
    "title": "MÖBIUS 3 DOCUMENTATION",
    "section": "",
    "text": "+++ title = ‘Upgrading from 2.5’ draft = false summary = ‘Instructions for importing Mobius 2.5 configuration files’ +++",
    "crumbs": [
      "Home",
      "Main",
      "Upgrading Old Installations"
    ]
  },
  {
    "objectID": "main/upgrading.html#upgrading-old-installations",
    "href": "main/upgrading.html#upgrading-old-installations",
    "title": "MÖBIUS 3 DOCUMENTATION",
    "section": "Upgrading Old Installations",
    "text": "Upgrading Old Installations\nThere is a utility that can help upgrade old Mobius 2.5 configuration files. It should copy all Preset and Track Setups, and most MIDI, keyboard, and host parameter bindings.\nUI configuration is not copied other than the command buttons at the top.\nMIDI bindings need an adjustment to the channel numbers stored in the mobius.xml file, so it is important that you use the upgrade utility rather than copying and pasting XML from the old mobius.xml file into the new one. If you are comfortable with XML editing, what you need to do is add 1 to any channel=‘x’ numbers you see in the  elements.\nSeveral functions have changed names, and some are no longer availble. The upgrade utility will attempt to upgrade the names. If you see warnings in the upgrade log that are not related to missing scripts, plase let me know.\nThere are three phases to the upgrade:\n\nLoading - mobius.xml and ui.xml file are loaded and analyzed but not installed\nInstallation - Previously analyzed files are installed in the Mobius 3 configuration\nUndo - Previously installed Mobius 3 upgrades are removed\n\nTo run the upgrade utility, bring up the Configuration menu and select Upgrade Configuration. A popup window appears with a large log area in the center and a row of command buttons at the top. The buttons do the following things:\n\nLoad Current - Attempts to locate the old configuration files from their standard locations and load them. You will see error messages in the log if the files can’t be found.\nLoad File - Load a file that you select. Use this option of Load Current was unable to find the files in the usual locations.\nInstall - Installs the upgraded configuration after a sucessful analysis\nUndo - Undoes a previous upgrade install\n\nThe log area will display messages about what the utility found in your old files. Normally Presets and Track Setups are added without any problems, but if you already have one of those with the same name as the ones in the old files, the prefix “Upgrade:” will be added to the upgraded objects. The most common case of this is an object named “Default” since there is already a standard Preset/Setup with that name in a new installation.\nIf you have scripts, the utility will verify the file paths to the script files and attempt to load them. Warning messages will be displayed in the log if any files cannot be found. All the script file references will be imported, but you will have to correct the path names in the Script configuration window after installing.\nThe most common source of warnings is when importing MIDI and keyboard bindings. A few function names have changed, and the upgrader will correct those, but I might have missed some and a few functions no longer exist. It you see warnings about unresolved functions or parameters that are not related to scripts, I’d like to hear about them.\nIf you have bindings to scripts, and the script files could not be found, you will likely see warnings about unresolved bindings with names that would appear inside the script file next to the !name statement. The bindings will still be imported, but you will need to correct the paths to the script files before they can be used.\nKeyboard bindings may not work, depending on which keys were used. The internal key numbers used to idenfity keys is different in Mobius 2.5 and Mobius 3. Simple letter and number key bindings should work, as well as common keys like escape and backspace. But the Fn function keys, keys in the number pad, keys in the Ins, Home area and the arrow keys may not work without redefining them. Any key binding that used the Shift, Ctrl, Alt, or Commmand modifiers will have to be redefined.\nA few of you made use of an old feature called Binding Overlays where you could have multiple sets of MIDI bindings that were merged with the first set of “Common Bindings”. The binding overlays will be imported by the ugprader, but you will not be able to activate them yet. I’m working on that now.\nCommand buttons displayed at the top of the UI should all be imported, but they are collected under a new Button Set with the name “Upgrade”. Button sets are a new feature in Mobius 3 where you can define any number of different button collections and switch between them. To see and use your old buttons, you will need to select the “Upgrade” set under the Display menu.",
    "crumbs": [
      "Home",
      "Main",
      "Upgrading Old Installations"
    ]
  },
  {
    "objectID": "main/upgrading.html#binding-overlays",
    "href": "main/upgrading.html#binding-overlays",
    "title": "MÖBIUS 3 DOCUMENTATION",
    "section": "Binding Overlays",
    "text": "Binding Overlays\nA few users made use of what Mobius 2.5 called Binding Overlays. An overlay binding is a named set of MIDI bindings that will be merged with the base set named “Common Bindings” when it is activated. There could only be one binding overlay active at a time. The intent here was to support bindings from multiple hardware devices, but only one of those devices would be in use at a time, and some of those bindings might be different.\nMobius 3 has a similar concept. You can create any number of MIDI binding sets in the MIDI Control panel. The first one is always named “Base” and is always active.\nThe binding sets after the first one are also called overlay bindings. Where this differs from Mobius 2.5, is that more than one can be active at a time.\nTo activate a binding overlay, select it in the MIDI Control panel, and check the Active checkbox. Next to this is another checkbox labeled “Merge with others”. What the merge checkbox does is allows this binding overlay to be active at the same time as other binding overlays. If the merge checkbox is not on, then any time you activate an overlay, all the others that do not have the merge checkbox will be deactivated.\nThe effect is similar to Mobius 2.5 but slightly more flexible. If you don’t check Merge on any of them, then it behaves exactly like 2.5 overlays, with only one being active at a time.\nI’m not entirely happy with the UI for this but, it is functional and not many people make use of this feature. I’ll be adding a simpler way to activate bindings from the main menu.",
    "crumbs": [
      "Home",
      "Main",
      "Upgrading Old Installations"
    ]
  },
  {
    "objectID": "main/mcl.html",
    "href": "main/mcl.html",
    "title": "MÖBIUS 3 DOCUMENTATION",
    "section": "",
    "text": "+++ title = ‘The Mobius Configuration Language (MCL)’ draft = false +++\nMCL is a simple text language that can be used to quickly make complex configuration changes. You can use it as alternative to the UI for creating sessions, overlays, and bindings. It is not the same as the scripting language MSL.\nMCL is written in text files and is executed using the menu item Run MCL Script item from the File menu. Unlike MSL you do not bind MCL scripts to MIDI or keyboard actions, it is only run from the menu, and each script is normally only run once.\n\nSections\nAn MCL script is line oriented, meaning that each line of the file contains a command. A file is origanized into one or more sections that begin with a section heading line. The section headings are:\n\nsession\noverlay\nbinding\n\n\n\nDefining Sessions\nTo create or modify a session, add a session section with a line similar to this:\nsession MySession\nThe word following the session keyword is the name of the session you want to create or modify. If the session name contains spaces, it must be surrounded with double quotes.\nsession \"My Session\"\nYou may also use the special name “active” which means you will modify whatever session is currently active in memory.\nsession active\nIf a session with the name you provide does not exist, a new session is created. If a session with that name already exists, it is modified. Creating or modifying a session does not load the session unless that session is already active.\nAfter the “session” header line will be one or more parameter assignment lines of this form:\n&lt;parameter name&gt; &lt;value&gt;\nFor example:\nquantize cycle\nswitchQuantize loop\ninputPort 1\noutputPort 2\nYou may have any number of parameter assignment lines following the session header. Parameter assignments made immediately after the session header are the default parameters. These will be the values shared by all tracks unless those tracks override the default values.\nIf you want a track to have a different parameter value than the default, you add a track header line like this:\ntrack 2\nAfter the track header, you then put other parameter assignment lines, but these parameters only apply to track number 2. In this example, a session is created with the default input port of 1 but this is overridden in track 2 to use inport port number 3.\nsession MySession\ninputPort 1\ntrack 2\ninputPort 3\nTo set parameter overrides for other tracks, just add more track header lines.\ntrack 3\ninputPort 4\ntrack 4\ninputPort 5\nYou can completely define all parameters for a session in this way, or you can just make changes to a few parameters. If a track currently has a parameter override that you would like to remove and have that track use the default parameter instead, use the special name “remove” as the parameter value.\ntrack 3\ninputPort remove\n\nTrack Scoped Lines\nAs an alternative to using the track subsection header to define track-specific parameters, you may also give each parameter assignment line a prefix. The prefix is a track number followed by a colon.\n4:inputPort 2\nThe previous line sets the inputPort parameter to 2 in track 4. It is the same as writing this:\ntrack 4\ninputPort 2\n\n\n\nConfiguring Sync Sources\nMCL can also be used to set parameters related to the synchronization sources. Since these are not related to tracks, they are set under the session header line.\nsession MySession\ntransportTempo 90\ntransportBeatsPerBar 5\nmidiBeatsPerBar 3\nhostBarOverride true\nhostBeatsPerBar 6\nWhen assigning parameters, you will need to use their internal names. These are the same as the names you would use in an MSL or MOS script. They are usually the same as the names displayed in the UI except that spaces are removed, the first letter is in lowercase, and each word is capitalized. For example, in the UI, parameter names are displayed with spaces between words and capital letters on each word:\n\nSwitch Quantize\nSync Source\nTrack Sync Unit\n\nThe internal script names for those parameters is:\n\nswitchQuantize\nsyncSource\ntrackSyncUnit\n\n\n\nDefining Overlays\nYou define overlays in the much the same way as you define sessions. The only difference is that the section header begins with overlay instead of session.\noverlay MyOverlay\nquantize off\noutputPort 5\n\n\nDefining Binding Sets\nUsing MCL can make entering a large number of MIDI or keyboard bindings much easier than using the UI. Bindings are created or modified within a binding set which has a name. To modify a binding set, create a bindings section in the MCL file using the section header “bindings” followed by the set name.\nbindings MyBindingSet\nIf you are not using multiple binding sets, all bindings are stored in the standard binding set named “Base” that you may modify with this section header.\nbindings Base\nAfter the bindings section header are one or more lines that define the bindings you wish to create. Unlike parameter assignments, bindings are complex and consist of the following values.\n\ntype (note, control, program, key)\nchannel (midi channel number from 1 to 16)\nvalue (midi note number, cc number, program number, key code)\nscope (track number or group name)\nsymbol (target function or parameter name)\narguments (arguments to a function)\n\nThere are several ways to specify all of these values. The first is to use keyword arguments where each value is preceeded by the name of the value you are setting.\ntype note channel 1 value 42 scope 2 symbol Record\nTo reduce the amount of typing when creating a large number of bindings, you may specify a column declaration that tells the MCL reader what the values in each line mean:\nbindings Base\ncolumns type channel value symbol\nnote 3 42 Record\nnote 3 44 Overdub\nThis creates two bindings, one for the Record function which is bound to the MIDI note number 42 on channel 3, and one for the Overdub function which is bound to the note number 44 also on channel 3.\nSince repeating the type and channel for MIDI bindings is common, they can be defaulted by specifying a default declaration.\nbindings Base\ndefaults type note channel 3\ncolumns value symbol\n42 Record\n44 Overdub\nYou can change the defaults and the columns any time within a binding section. If you wanted to start entering bindings for channel 4 instead, just add another defaults line.\ndefaults channel 4\n42 Multiply\n44 Insert\nThe most recent columns specification is still being used, and the default for type is still note, but the default channel is now 4 instead of 3.\nYou may also override the defaults on any binding line by using keyword arguments, but these must go after the values for the declared columns.\ndefaults type note channel 3\ncolumns value symbol\n42 Record\n42 Overdub channel 4\nHere the same note number 42 is used for both the Record and Overdub functions, but Overdub is bound to channel 4 instead of 3. It is the same as writing these lines, but saves one line of text.\ndefaults type note channel 3\ncolumns value symbol\n42 Record\ndefaults channel 4\n42 Overdub",
    "crumbs": [
      "Home",
      "Main",
      "Sections"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home Page",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  }
]